generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// The User model represents a user in the system
model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  bio                   String?   @db.Text
  username              String    @unique
  theme                 String    @default("{}")
  blocks                String    @default("[]")
  termsAccepted         Boolean   @default(false)
  privacyPolicyAccepted Boolean   @default(false)
  scheduledForDeletion  DateTime? // If set, user is scheduled for deletion
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  links    Link[]
  rssFeeds RssFeed[]
  projects Project[]
}

// The user's OAuth account
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  refresh_token     String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id        String   @id @default(cuid())
  userId    String
  url       String
  title     String
  position  Int
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RssFeed {
  id            String    @id @default(cuid())
  userId        String
  url           String
  lastFetchedAt DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cachedArticles CachedArticle[]
}

model CachedArticle {
  id       String   @id @default(cuid())
  feedId   String
  title    String
  link     String
  pubDate  DateTime
  snippet  String?  @db.Text
  imageUrl String?

  feed RssFeed @relation(fields: [feedId], references: [id], onDelete: Cascade)
}

model Project {
  id            String   @id @default(cuid())
  userId        String
  title         String
  description   String   @db.Text
  imageUrl      String?
  liveDemoUrl   String?
  sourceCodeUrl String?
  techStack     String[]
  displayOrder  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
